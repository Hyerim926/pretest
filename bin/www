#!/usr/run/envs node
var path = require('path');

if(process.env.SERVER_ENV == null){

  console.log("envs files not found");
  process.exit(1);
}

var DOT_ENV_PATH = path.join(process.cwd(), 'envs', process.env.SERVER_ENV + '.envs');

// 공통 .envs
require('dotenv').config();
// 환경별 envs
require('dotenv').config({ path: DOT_ENV_PATH });


/**
 * Module dependencies.
 */

var app = require('../dist/app');
var debug = require('debug')('wellgrower:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.envs.PORT || '3000');
var port = normalizePort(process.env.PORT || '7000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function (err) {

  console.log(`> Ready on http://localhost:${port}`)
  // PM2가 스크립트를 실행하지 않았다면 process.send 메소드가 undefined일 수 있다.
  if (process.send) {
    // PM2에게 앱 구동이 완료되었음을 전달한다
    process.send('ready')
  }
});

process.on('SIGINT', function () {
  server.close(function () {
    console.log('server closed');
    process.exit(0);
  })
})

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */


function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
